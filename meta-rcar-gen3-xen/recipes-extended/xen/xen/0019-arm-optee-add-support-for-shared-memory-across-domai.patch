From c01bc68430e3b3db4be393e5135120c5464ff292 Mon Sep 17 00:00:00 2001
From: Volodymyr Babchuk <volodymyr.babchuk@globallogic.com>
Date: Thu, 7 Jul 2016 19:06:24 +0300
Subject: [PATCH 2/4] arm/optee: add support for shared memory across domains

Shared memory region reported by OPTEE will by split by N parts.
Every domain will receive one of the parts. During domain destruction
it's shared memory part will be returned to the pool.

TODO: Track shared memory buffers allocation and caching.

Signed-off-by: Volodymyr Babchuk <volodymyr.babchuk@globallogic.com>
---
 xen/arch/arm/domain.c      |  7 ++++
 xen/arch/arm/optee/optee.h |  5 +++
 xen/arch/arm/optee/smc.c   | 98 +++++++++++++++++++++++++++++++++++++++++++---
 xen/arch/arm/p2m.c         | 13 ++++++
 xen/arch/arm/traps.c       |  4 --
 xen/include/asm-arm/p2m.h  |  7 ++++
 6 files changed, 124 insertions(+), 10 deletions(-)

diff --git a/xen/arch/arm/domain.c b/xen/arch/arm/domain.c
index 1365b4a..5815922 100644
--- a/xen/arch/arm/domain.c
+++ b/xen/arch/arm/domain.c
@@ -36,6 +36,10 @@
 #include "vtimer.h"
 #include "vuart.h"
 
+#ifdef CONFIG_OPTEE
+#include "optee/optee.h"
+#endif
+
 DEFINE_PER_CPU(struct vcpu *, curr_vcpu);
 
 void idle_loop(void)
@@ -635,6 +639,9 @@ void arch_domain_destroy(struct domain *d)
     /* IOMMU page table is shared with P2M, always call
      * iommu_domain_destroy() before p2m_teardown().
      */
+#ifdef CONFIG_OPTEE
+    optee_domain_destroy(d);
+#endif
     iommu_domain_destroy(d);
     p2m_teardown(d);
     domain_vgic_free(d);
diff --git a/xen/arch/arm/optee/optee.h b/xen/arch/arm/optee/optee.h
index 2cf7243..6ebd909 100644
--- a/xen/arch/arm/optee/optee.h
+++ b/xen/arch/arm/optee/optee.h
@@ -20,7 +20,12 @@
 #ifndef __ARCH_ARM_OPTEE_OPTEE_H__
 #define __ARCH_ARM_OPTEE_OPTEE_H__
 
+#ifndef OPTEE_MAX_DOMAINS
+#define OPTEE_MAX_DOMAINS 4
+#endif
+
 extern int optee_handle_smc(struct cpu_user_regs *regs);
+extern void optee_domain_destroy(struct domain *d);
 
 #endif
 
diff --git a/xen/arch/arm/optee/smc.c b/xen/arch/arm/optee/smc.c
index 6639df4..d59ab91 100644
--- a/xen/arch/arm/optee/smc.c
+++ b/xen/arch/arm/optee/smc.c
@@ -30,8 +30,25 @@
 #include <asm/event.h>
 #include <public/xen.h>
 
+#include "optee.h"
 #include "optee_smc.h"
 
+struct domain_shmem_info {
+	paddr_t maddr;
+	paddr_t gaddr;
+	size_t size;
+	domid_t domain_id;
+	bool_t valid;
+};
+
+static struct domain_shmem_info domain_shmem_info[OPTEE_MAX_DOMAINS];
+
+struct optee_shmem_info {
+	paddr_t maddr;
+	size_t size;
+	bool_t valid;
+} optee_shmem_info;
+
 static void execute_smc(struct cpu_user_regs *regs)
 {
 	register_t retval[4];
@@ -43,7 +60,7 @@ static void execute_smc(struct cpu_user_regs *regs)
 	             regs->x4,
 	             regs->x5,
 	             regs->x6,
-	             current->domain->domain_id,
+	             current->domain->domain_id + 1,
 	             retval);
 	regs->x0 = retval[0];
 	regs->x1 = retval[1];
@@ -53,11 +70,68 @@ static void execute_smc(struct cpu_user_regs *regs)
 
 static void do_process_get_shm_config(struct cpu_user_regs *regs)
 {
-	int ret;
-	execute_smc(regs);
-	ret =  guest_physmap_add_entry(current->domain, regs->x1 >> PAGE_SHIFT,
-	                               regs->x1 >> PAGE_SHIFT,
-	                               ffsl(regs->x2) - PAGE_SHIFT, p2m_ram_rw);
+	if (!optee_shmem_info.valid) {
+		size_t domain_shmem_size;
+		paddr_t maddr;
+
+		/* Get config from OPTEE */
+		execute_smc(regs);
+		optee_shmem_info.maddr = regs->x1;
+		optee_shmem_info.size = regs->x2;
+		optee_shmem_info.valid = true;
+		/* Split OP-TEE shmem region for domains */
+		domain_shmem_size =
+			(optee_shmem_info.size/OPTEE_MAX_DOMAINS);
+		domain_shmem_size -= domain_shmem_size%PAGE_SIZE;
+		maddr = optee_shmem_info.maddr;
+		for (int i = 0; i < OPTEE_MAX_DOMAINS; i++) {
+			domain_shmem_info[i].valid = false;
+			domain_shmem_info[i].size = domain_shmem_size;
+			domain_shmem_info[i].maddr = maddr;
+			domain_shmem_info[i].gaddr = maddr;
+			maddr += domain_shmem_size;
+		}
+	}
+
+	/* Check if memory is already maped for this domain */
+	for (int i = 0; i < OPTEE_MAX_DOMAINS; i++) {
+		if (domain_shmem_info[i].valid &&
+		    domain_shmem_info[i].domain_id == current->domain->domain_id) {
+			regs->x0 = OPTEE_SMC_RETURN_OK;
+			regs->x1 = domain_shmem_info[i].gaddr;
+			regs->x2 = domain_shmem_info[i].size;
+			regs->x3 = OPTEE_SMC_SHM_CACHED;
+			return;
+		}
+	}
+
+	/* Find free slot and map memory */
+	for (int i = 0; i < OPTEE_MAX_DOMAINS; i++) {
+		if (domain_shmem_info[i].valid == false) {
+			int ret = guest_physmap_add_entry_range(
+				current->domain,
+				paddr_to_pfn(domain_shmem_info[i].gaddr),
+				domain_shmem_info[i].size / PAGE_SIZE,
+				paddr_to_pfn(domain_shmem_info[i].maddr),
+				p2m_ram_rw);
+			if (ret == 0) {
+				regs->x0 = OPTEE_SMC_RETURN_OK;
+				regs->x1 = domain_shmem_info[i].gaddr;
+				regs->x2 = domain_shmem_info[i].size;
+				regs->x3 = OPTEE_SMC_SHM_CACHED;
+				domain_shmem_info[i].domain_id =
+					current->domain->domain_id;
+				domain_shmem_info[i].valid = true;
+				return;
+			} else {
+				regs->x0 = OPTEE_SMC_RETURN_ENOMEM;
+				return;
+			}
+		}
+	}
+
+	/* There are no free slots */
+	regs->x0 = OPTEE_SMC_RETURN_ENOMEM;
 }
 
 int optee_handle_smc(struct cpu_user_regs *regs)
@@ -75,6 +149,18 @@ int optee_handle_smc(struct cpu_user_regs *regs)
 	return 0;
 }
 
+
+void optee_domain_destroy(struct domain *d)
+{
+	/* Mark domain's shared memory as free */
+	for (int i = 0; i < OPTEE_MAX_DOMAINS; i++) {
+		if (domain_shmem_info[i].valid &&
+		    domain_shmem_info[i].domain_id == d->domain_id) {
+			domain_shmem_info[i].valid = false;
+		}
+	}
+}
+
 /*
  * Local variables:
  * mode: C
diff --git a/xen/arch/arm/p2m.c b/xen/arch/arm/p2m.c
index 6a19c57..37447bc 100644
--- a/xen/arch/arm/p2m.c
+++ b/xen/arch/arm/p2m.c
@@ -1302,6 +1302,19 @@ int guest_physmap_add_entry(struct domain *d,
                              d->arch.p2m.default_access);
 }
 
+int guest_physmap_add_entry_range(struct domain *d,
+                                  unsigned long start_gfn,
+                                  unsigned long nr_mfns,
+                                  unsigned long mfn,
+                                  p2m_type_t t)
+{
+    return apply_p2m_changes(d, INSERT,
+                             pfn_to_paddr(start_gfn),
+                             pfn_to_paddr(start_gfn + nr_mfns),
+                             pfn_to_paddr(mfn), MATTR_MEM, 0, t,
+                             d->arch.p2m.default_access);
+}
+
 void guest_physmap_remove_page(struct domain *d,
                                unsigned long gpfn,
                                unsigned long mfn, unsigned int page_order)
diff --git a/xen/arch/arm/traps.c b/xen/arch/arm/traps.c
index 1848142..e32f49e 100644
--- a/xen/arch/arm/traps.c
+++ b/xen/arch/arm/traps.c
@@ -1665,10 +1665,6 @@ static void do_trap_smc(struct cpu_user_regs *regs, const union hsr hsr)
 #ifdef CONFIG_OPTEE
 	uint32_t smc_code = regs->r0;
 
-	/* Only dom0 can issue SMC call for now */
-	if (current->domain->domain_id != 0)
-		goto err;
-
 	/* Check if this call is to OPTEE */
 	if (OPTEE_SMC_OWNER_NUM(smc_code) >= OPTEE_SMC_OWNER_TRUSTED_APP &&
 	    OPTEE_SMC_OWNER_NUM(smc_code) <= OPTEE_SMC_OWNER_TRUSTED_OS_API) {
diff --git a/xen/include/asm-arm/p2m.h b/xen/include/asm-arm/p2m.h
index d240d1e..a256675 100644
--- a/xen/include/asm-arm/p2m.h
+++ b/xen/include/asm-arm/p2m.h
@@ -165,6 +165,13 @@ int guest_physmap_add_entry(struct domain *d,
                             unsigned long page_order,
                             p2m_type_t t);
 
+int guest_physmap_add_entry_range(struct domain *d,
+                                  unsigned long start_gfn,
+                                  unsigned long nr_mfns,
+                                  unsigned long mfn,
+                                  p2m_type_t t);
+
+
 /* Untyped version for RAM only, for compatibility */
 static inline int guest_physmap_add_page(struct domain *d,
                                          unsigned long gfn,
-- 
2.8.3

