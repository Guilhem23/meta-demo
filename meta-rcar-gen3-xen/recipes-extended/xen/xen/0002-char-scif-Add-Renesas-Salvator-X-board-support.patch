From a044ea8b21d12ae31e983b8ca07da715547255c9 Mon Sep 17 00:00:00 2001
From: Iurii Konovalenko <iurii.konovalenko@globallogic.com>
Date: Fri, 10 Jun 2016 10:51:11 +0300
Subject: [PATCH 2/3] char:scif: Add Renesas Salvator-X board support

Modify SCIF driver to support internal clock source. Such type of clock
source is used, for example, on Renesas Salvator-X board (R-CarH3 SoC)

Signed-off-by: Iurii Konovalenko <iurii.konovalenko@globallogic.com>
---
 xen/drivers/char/scif-uart.c | 71 ++++++++++++++++++++++++++++++++------------
 1 file changed, 52 insertions(+), 19 deletions(-)

diff --git a/xen/drivers/char/scif-uart.c b/xen/drivers/char/scif-uart.c
index 51a2233..067e739 100644
--- a/xen/drivers/char/scif-uart.c
+++ b/xen/drivers/char/scif-uart.c
@@ -41,7 +41,7 @@
 #define scif_writew(uart, off, val)    writew((val), (uart)->regs + (off))
 
 static struct scif_uart {
-    unsigned int baud, clock_hz, data_bits, parity, stop_bits;
+    unsigned int baud, clock_hz, data_bits, parity, stop_bits, clock_source;
     unsigned int irq;
     char __iomem *regs;
     struct irqaction irqaction;
@@ -108,8 +108,8 @@ static void __init scif_uart_init_preirq(struct serial_port *port)
     scif_readw(uart, SCIF_SCLSR);
     scif_writew(uart, SCIF_SCLSR, 0);
 
-    /* Select Baud rate generator output as a clock source */
-    scif_writew(uart, SCIF_SCSCR, SCSCR_CKE10);
+    /* Select clock source */
+    scif_writew(uart, SCIF_SCSCR, uart->clock_source);
 
     /* Setup protocol format and Baud rate, select Asynchronous mode */
     val = 0;
@@ -143,22 +143,28 @@ static void __init scif_uart_init_preirq(struct serial_port *port)
     scif_writew(uart, SCIF_SCSMR, val);
 
     ASSERT( uart->clock_hz > 0 );
-    if ( uart->baud != BAUD_AUTO )
+    if( uart->clock_source == SCSCR_CKE10 )
     {
-        /* Setup desired Baud rate */
-        divisor = uart->clock_hz / (uart->baud << 4);
-        ASSERT( divisor >= 1 && divisor <= (uint16_t)UINT_MAX );
-        scif_writew(uart, SCIF_DL, (uint16_t)divisor);
-        /* Selects the frequency divided clock (SC_CLK external input) */
-        scif_writew(uart, SCIF_CKS, 0);
-        udelay(1000000 / uart->baud + 1);
+        if ( uart->baud != BAUD_AUTO )
+        {
+            /* Setup desired Baud rate */
+            divisor = uart->clock_hz / (uart->baud << 4);
+            ASSERT( divisor >= 1 && divisor <= (uint16_t)UINT_MAX );
+            scif_writew(uart, SCIF_DL, (uint16_t)divisor);
+            /* Selects the frequency divided clock (SC_CLK external input) */
+            scif_writew(uart, SCIF_CKS, 0);
+            udelay(1000000 / uart->baud + 1);
+        }
+        else
+        {
+            /* Read current Baud rate */
+            divisor = scif_readw(uart, SCIF_DL);
+            ASSERT( divisor >= 1 && divisor <= (uint16_t)UINT_MAX );
+            uart->baud = uart->clock_hz / (divisor << 4);
+        }
     }
     else
     {
-        /* Read current Baud rate */
-        divisor = scif_readw(uart, SCIF_DL);
-        ASSERT( divisor >= 1 && divisor <= (uint16_t)UINT_MAX );
-        uart->baud = uart->clock_hz / (divisor << 4);
     }
 
     /* Setup trigger level for TX/RX FIFOs */
@@ -346,15 +352,42 @@ static int __init scif_uart_init(struct dt_device_node *dev,
     return 0;
 }
 
-static const struct dt_device_match scif_uart_dt_match[] __initconst =
+static int __init scif_gen2_uart_init(struct dt_device_node *dev,
+                                 const void *data)
+{
+    scif_com.clock_source = SCSCR_CKE10;
+
+    return scif_uart_init(dev, data);
+}
+
+static int __init scif_gen3_uart_init(struct dt_device_node *dev,
+                                 const void *data)
+{
+    scif_com.clock_source = SCSCR_CKE0;
+
+    return scif_uart_init(dev, data);
+}
+
+static const struct dt_device_match scif_gen2_uart_dt_match[] __initconst =
 {
     DT_MATCH_COMPATIBLE("renesas,scif"),
     { /* sentinel */ },
 };
 
-DT_DEVICE_START(scif_uart, "SCIF UART", DEVICE_SERIAL)
-    .dt_match = scif_uart_dt_match,
-    .init = scif_uart_init,
+static const struct dt_device_match scif_gen3_uart_dt_match[] __initconst =
+{
+    DT_MATCH_COMPATIBLE("renesas,rcar-gen3-scif"),
+    { /* sentinel */ },
+};
+
+DT_DEVICE_START(scif_gen2_uart, "SCIF UART", DEVICE_SERIAL)
+    .dt_match = scif_gen2_uart_dt_match,
+    .init = scif_gen2_uart_init,
+DT_DEVICE_END
+
+DT_DEVICE_START(scif_gen3_uart, "SCIF UART", DEVICE_SERIAL)
+    .dt_match = scif_gen3_uart_dt_match,
+    .init = scif_gen3_uart_init,
 DT_DEVICE_END
 
 /*
-- 
1.9.1

