From 8c96b29262c6709e72f16b1ba5ff17b99eb22ca1 Mon Sep 17 00:00:00 2001
From: Iurii Konovalenko <iurii.konovalenko@globallogic.com>
Date: Wed, 22 Jun 2016 17:44:52 +0300
Subject: [PATCH] libxl: Add passthrough nodes list

Some platforms needs more nodes from device tree in addition
to "passthrough" node, that is given to domain by default.
Specify in domain configuration file which nodes should be
passthroued, writing in properety "passthrough_nodes" full
paths to nodes, separated by comas.

Signed-off-by: Iurii Konovalenko <iurii.konovalenko@globallogic.com>
---
 tools/libxl/libxl_arm.c     | 23 +++++++++++++++++++----
 tools/libxl/libxl_types.idl |  5 +++++
 tools/libxl/xl_cmdimpl.c    | 15 ++++++++++++++-
 3 files changed, 38 insertions(+), 5 deletions(-)

diff --git a/tools/libxl/libxl_arm.c b/tools/libxl/libxl_arm.c
index 1195b37..f00f7bb 100644
--- a/tools/libxl/libxl_arm.c
+++ b/tools/libxl/libxl_arm.c
@@ -706,9 +706,10 @@ static int copy_node_by_path(libxl__gc *gc, const char *path,
  *  - /passthrough node
  *  - /aliases node
  */
-static int copy_partial_fdt(libxl__gc *gc, void *fdt, void *pfdt)
+static int copy_partial_fdt(libxl__gc *gc, void *fdt, void *pfdt,
+                            const libxl_domain_build_info *info)
 {
-    int r;
+    int r, i;
 
     r = copy_node_by_path(gc, "/passthrough", fdt, pfdt);
     if (r < 0) {
@@ -716,6 +717,19 @@ static int copy_partial_fdt(libxl__gc *gc, void *fdt, void *pfdt)
         return r;
     }
 
+    for(i = 0; i < info->num_passthrough_nodes; i++)
+    {
+        if( !info->passthrough_nodes[i].path ) {
+            LOG(ERROR, "Bad passthrough node for the partial FDT");
+            continue;
+        }
+        r = copy_node_by_path(gc, info->passthrough_nodes[i].path, fdt, pfdt);
+        if (r < 0 && r != -FDT_ERR_NOTFOUND) {
+            LOG(ERROR, "Can't copy the node \"%s\" from the partial FDT", info->passthrough_nodes[i].path);
+            return r;
+        }
+    }
+
     r = copy_node_by_path(gc, "/aliases", fdt, pfdt);
     if (r < 0 && r != -FDT_ERR_NOTFOUND) {
         LOG(ERROR, "Can't copy the node \"/aliases\" from the partial FDT");
@@ -734,7 +748,8 @@ static int check_partial_fdt(libxl__gc *gc, void *fdt, size_t size)
     return ERROR_FAIL;
 }
 
-static int copy_partial_fdt(libxl__gc *gc, void *fdt, void *pfdt)
+static int copy_partial_fdt(libxl__gc *gc, void *fdt, void *pfdt,
+                            const libxl_domain_build_info *info)
 {
     /*
      * We should never be here when the partial device tree is not
@@ -859,7 +874,7 @@ next_resize:
         FDT( make_hypervisor_node(gc, fdt, vers) );
 
         if (pfdt)
-            FDT( copy_partial_fdt(gc, fdt, pfdt) );
+            FDT( copy_partial_fdt(gc, fdt, pfdt, info) );
 
         FDT( fdt_end_node(fdt) );
 
diff --git a/tools/libxl/libxl_types.idl b/tools/libxl/libxl_types.idl
index ef614be..d8a4132 100644
--- a/tools/libxl/libxl_types.idl
+++ b/tools/libxl/libxl_types.idl
@@ -439,6 +439,10 @@ libxl_rdm_reserve = Struct("rdm_reserve", [
     ("policy",      libxl_rdm_reserve_policy),
     ])
 
+libxl_passthrough_info = Struct("passthrough_info", [
+    ("path",       string),
+    ])
+
 libxl_domain_build_info = Struct("domain_build_info",[
     ("max_vcpus",       integer),
     ("avail_vcpus",     libxl_bitmap),
@@ -494,6 +498,7 @@ libxl_domain_build_info = Struct("domain_build_info",[
     # Note that the partial device tree should avoid to use the phandle
     # 65000 which is reserved by the toolstack.
     ("device_tree",      string),
+    ("passthrough_nodes",            Array(libxl_passthrough_info, "num_passthrough_nodes")),
     ("u", KeyedUnion(None, libxl_domain_type, "type",
                 [("hvm", Struct(None, [("firmware",         string),
                                        ("bios",             libxl_bios_type),
diff --git a/tools/libxl/xl_cmdimpl.c b/tools/libxl/xl_cmdimpl.c
index d8530f0..35b5645 100644
--- a/tools/libxl/xl_cmdimpl.c
+++ b/tools/libxl/xl_cmdimpl.c
@@ -1325,7 +1325,7 @@ static void parse_config_data(const char *config_source,
     long l, vcpus = 0;
     XLU_Config *config;
     XLU_ConfigList *cpus, *vbds, *nics, *pcis, *cvfbs, *cpuids, *vtpms,
-                   *usbctrls, *usbdevs;
+                   *usbctrls, *usbdevs, *nodes;
     XLU_ConfigList *channels, *ioports, *irqs, *iomem, *viridian, *dtdevs;
     int num_ioports, num_irqs, num_iomem, num_cpus, num_viridian;
     int pci_power_mgmt = 0;
@@ -1855,6 +1855,19 @@ static void parse_config_data(const char *config_source,
         }
     }
 
+    if (!xlu_cfg_get_list (config, "passthrough_nodes", &nodes, 0, 0)) {
+        d_config->b_info.num_passthrough_nodes = 0;
+        d_config->b_info.passthrough_nodes = NULL;
+        while ((buf = xlu_cfg_get_listitem (nodes, d_config->b_info.num_passthrough_nodes)) != NULL)
+        {
+            libxl_passthrough_info * node;
+            node = ARRAY_EXTEND_INIT_NODEVID(d_config->b_info.passthrough_nodes,
+                                             d_config->b_info.num_passthrough_nodes,
+                                             libxl_passthrough_info_init);
+            node->path = strdup(buf);
+        }
+    }
+
     if (!xlu_cfg_get_list(config, "vtpm", &vtpms, 0, 0)) {
         d_config->num_vtpms = 0;
         d_config->vtpms = NULL;
-- 
1.9.1

