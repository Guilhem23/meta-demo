From ad8744a3c4f9adaab0a997839ab95e5d314338af Mon Sep 17 00:00:00 2001
From: Iurii Konovalenko <iurii.konovalenko@globallogic.com>
Date: Wed, 29 Jun 2016 21:36:27 +0300
Subject: [PATCH] xen/arm: alloc domain memory 1 to 1

To allow such options as DMA we need to have 1 to 1 memory
mapping in driver domain. The following update memory allocation
logic for such domain.

Signed-off-by: Iurii Konovalenko <iurii.konovalenko@globallogic.com>
---
 tools/libxc/include/xc_dom.h |   8 +++
 tools/libxc/xc_dom_arm.c     | 166 +++++++++++++++++++++++++++++++++++++++++--
 tools/libxc/xc_dom_core.c    |   7 ++
 tools/libxl/libxl_arm.c      |  87 ++++++++++++-----------
 xen/common/memory.c          |  13 +++-
 xen/include/xen/sched.h      |   1 +
 6 files changed, 235 insertions(+), 47 deletions(-)

diff --git a/tools/libxc/include/xc_dom.h b/tools/libxc/include/xc_dom.h
index 6cb10c4..deddada 100644
--- a/tools/libxc/include/xc_dom.h
+++ b/tools/libxc/include/xc_dom.h
@@ -56,6 +56,12 @@ struct xc_dom_phys {
     xen_pfn_t count;
 };
 
+struct xc_dom_membank {
+    struct xc_dom_membank *next;
+    xen_pfn_t first;
+    xen_pfn_t count;
+};
+
 struct xc_dom_image {
     /* files */
     void *kernel_blob;
@@ -145,6 +151,8 @@ struct xc_dom_image {
     xen_pfn_t p2m_size;         /* number of pfns covered by p2m */
     struct xc_dom_phys *phys_pages;
 #if defined (__arm__) || defined(__aarch64__)
+    /*List of memory banks*/
+    struct xc_dom_membank *memory_banks;
     xen_pfn_t rambank_size[GUEST_RAM_BANKS];
 #endif
 
diff --git a/tools/libxc/xc_dom_arm.c b/tools/libxc/xc_dom_arm.c
index 7561682..a172d51 100644
--- a/tools/libxc/xc_dom_arm.c
+++ b/tools/libxc/xc_dom_arm.c
@@ -245,6 +245,42 @@ static int set_mode(xc_interface *xch, domid_t domid, char *guest_type)
     return rc;
 }
 
+static int add_memory_bank(struct xc_dom_image *dom,
+                            xen_pfn_t pfn, xen_pfn_t count)
+{
+    struct xc_dom_membank *bank = malloc(sizeof(*bank));
+    if ( bank == NULL )
+    {
+        DOMPRINTF("%s: allocation failed", __FUNCTION__);
+        return -ENOMEM;
+    }
+
+    bank->first = pfn;
+    bank->count = count;
+    bank->next = dom->memory_banks;
+    dom->memory_banks = bank;
+
+	return 0;
+}
+
+static int add_memory_banks(struct xc_dom_image *dom, int nr,
+                            xen_pfn_t *extents, int pfn_shift)
+{
+    int i;
+
+    if( nr <= 0 )
+        return 0;
+
+    for(i = 0; i < nr; i++)
+    {
+        int res = add_memory_bank(dom, extents[i], 1 << pfn_shift);
+        if( res != 0 )
+            return res;
+    }
+
+    return 0;
+}
+
 /*  >0: success, *nr_pfns set to number actually populated
  *   0: didn't try with this pfn shift (e.g. misaligned base etc)
  *  <0: ERROR
@@ -261,7 +297,7 @@ static int populate_one_size(struct xc_dom_image *dom, int pfn_shift,
     const xen_pfn_t next_boundary
         = (base_pfn + ((uint64_t)1<<next_shift)) & ~next_mask;
 
-    int nr, i, count;
+    int nr, i, count, err;
     xen_pfn_t end_pfn = base_pfn + *nr_pfns;
 
     /* No level zero super pages with current hardware */
@@ -294,6 +330,10 @@ static int populate_one_size(struct xc_dom_image *dom, int pfn_shift,
     DOMPRINTF("%s: populated %#x/%#x entries with shift %d",
               __FUNCTION__, nr, count, pfn_shift);
 
+    err = add_memory_banks(dom, nr, extents, pfn_shift);
+    if( err < 0 )
+        return err;
+
     *nr_pfns = nr << pfn_shift;
 
     return 1;
@@ -390,6 +430,118 @@ out:
     return rc < 0 ? rc : 0;
 }
 
+static void squash_memory_banks(struct xc_dom_image *dom)
+{
+    struct xc_dom_membank *curr = dom->memory_banks, *n;
+
+    while( curr )
+        if( curr->next && (curr->first + curr->count) == curr->next->first )
+        {
+            n = curr->next->next;
+            curr->count += curr->next->count;
+            free(curr->next);
+            curr->next = n;
+        }
+        else
+            curr = curr->next;
+}
+
+static void sort_memory_banks(struct xc_dom_image *dom)
+{
+    struct xc_dom_membank *curr = dom->memory_banks, *prev, **change;
+
+    while( curr )
+        if( curr->next && (curr->first > curr->next->first) )
+        {
+            prev = dom->memory_banks;
+            while( prev && (prev->next != curr) && (prev != curr))
+                prev = prev->next;
+            if( prev )
+            {
+                if( curr == dom->memory_banks)
+                    change = &dom->memory_banks;
+                else
+                    change = &prev->next;
+
+                *change = curr->next;
+                curr->next = (*change)->next;
+                (*change)->next = curr;
+                curr = prev;
+            }
+        }
+        else
+            curr = curr->next;
+}
+
+//Domain alignment is 64MB
+#define DOM_ALIGN (1 << 26)
+#define DOM_ALIGN_FIXUP (DOM_ALIGN - 1)
+#define DOM_ALIGN_MASK (~DOM_ALIGN_FIXUP)
+#define DOM_ALIGN_DOWN(x) ((x) & DOM_ALIGN_MASK)
+#define DOM_ALIGN_UP(x) (DOM_ALIGN_DOWN((x) + DOM_ALIGN_FIXUP))
+struct zimage64_hdr {
+    uint32_t magic0;
+    uint32_t res0;
+    uint64_t text_offset;  /* Image load offset */
+    uint64_t res1;
+    uint64_t res2;
+    /* zImage V1 only from here */
+    uint64_t res3;
+    uint64_t res4;
+    uint64_t res5;
+    uint32_t magic1;
+    uint32_t res6;
+};
+static void fixup_dom_memories(struct xc_dom_image *dom, uint64_t *base)
+{
+    struct xc_dom_membank *curr;
+    uint64_t aligned_start;
+    uint64_t aligned_size;
+    struct zimage64_hdr *zimage = dom->kernel_blob;
+
+    for(curr = dom->memory_banks; curr; curr = curr->next)
+    {
+        aligned_start = DOM_ALIGN_UP(curr->first << XC_PAGE_SHIFT);
+        aligned_size = (curr->count << XC_PAGE_SHIFT) - aligned_start + (curr->first << XC_PAGE_SHIFT);
+        if( aligned_size > dom->kernel_size )
+            break;
+    }
+
+    if( curr == NULL)
+        return;
+
+    curr->first = aligned_start >> XC_PAGE_SHIFT;
+    curr->count = aligned_size >> XC_PAGE_SHIFT;
+
+    base[0] = aligned_start;
+    dom->rambank_size[0] = (uint64_t)curr->count;
+    dom->kernel_seg.vstart = base[0] + zimage->text_offset;
+    dom->kernel_seg.vend = dom->kernel_seg.vstart + dom->kernel_size;
+    dom->parms.virt_entry = dom->kernel_seg.vstart;
+    dom->parms.virt_base = base[0];
+    dom->pfn_alloc_end += curr->first - dom->rambase_pfn;
+    dom->rambase_pfn = curr->first;
+}
+
+static void optimize_memory_banks(struct xc_dom_image *dom, uint64_t *base)
+{
+    struct xc_dom_membank *curr;
+    xen_pfn_t pfn;
+
+    if( dom->memory_banks == NULL )
+        return;
+
+    squash_memory_banks(dom);
+    sort_memory_banks(dom);
+    squash_memory_banks(dom);
+    fixup_dom_memories(dom, base);
+
+    for(curr = dom->memory_banks; curr; curr = curr->next)
+        for ( pfn = curr->first; pfn < (curr->first + curr->count); pfn++ )
+                dom->p2m_host[pfn - (base[0] >> XC_PAGE_SHIFT)] = pfn;
+
+}
+
 static int meminit(struct xc_dom_image *dom)
 {
     int i, rc;
@@ -398,7 +550,7 @@ static int meminit(struct xc_dom_image *dom)
 
     uint64_t ramsize = (uint64_t)dom->total_pages << XC_PAGE_SHIFT;
 
-    const uint64_t bankbase[] = GUEST_RAM_BANK_BASES;
+    uint64_t bankbase[] = GUEST_RAM_BANK_BASES;
     const uint64_t bankmax[] = GUEST_RAM_BANK_SIZES;
 
     /* Convenient */
@@ -410,13 +562,11 @@ static int meminit(struct xc_dom_image *dom)
     const uint64_t ramdisk_size = dom->ramdisk_blob ?
         ROUNDUP(dom->ramdisk_size, XC_PAGE_SHIFT) : 0;
     const uint64_t modsize = dtb_size + ramdisk_size;
-    const uint64_t ram128mb = bankbase[0] + (128<<20);
+    uint64_t ram128mb;
 
     xen_pfn_t p2m_size;
     uint64_t bank0end;
 
-    assert(dom->rambase_pfn << XC_PAGE_SHIFT == bankbase[0]);
-
     if ( modsize + kernsize > bankmax[0] )
     {
         DOMPRINTF("%s: Not enough memory for the kernel+dtb+initrd",
@@ -450,7 +600,7 @@ static int meminit(struct xc_dom_image *dom)
 
         ramsize -= banksize;
 
-        p2m_size = ( bankbase[i] + banksize - bankbase[0] ) >> XC_PAGE_SHIFT;
+        p2m_size = 0x780000/*( bankbase[i] + banksize - bankbase[0] ) >> XC_PAGE_SHIFT*/;
 
         dom->rambank_size[i] = banksize >> XC_PAGE_SHIFT;
     }
@@ -474,6 +624,10 @@ static int meminit(struct xc_dom_image *dom)
             return rc;
     }
 
+    optimize_memory_banks(dom, bankbase);
+
+    ram128mb = bankbase[0] + (128<<20);
+
     /*
      * We try to place dtb+initrd at 128MB or if we have less RAM
      * as high as possible. If there is no space then fallback to
diff --git a/tools/libxc/xc_dom_core.c b/tools/libxc/xc_dom_core.c
index 55c779d..076dc4f 100644
--- a/tools/libxc/xc_dom_core.c
+++ b/tools/libxc/xc_dom_core.c
@@ -265,6 +265,13 @@ void *xc_dom_malloc_filemap(struct xc_dom_image *dom,
 static void xc_dom_free_all(struct xc_dom_image *dom)
 {
     struct xc_dom_mem *block;
+    struct xc_dom_membank *bank;
+
+    while ( (bank = dom->memory_banks) != NULL )
+    {
+        dom->memory_banks = bank->next;
+        free(bank);
+    }
 
     while ( (block = dom->memblocks) != NULL )
     {
diff --git a/tools/libxl/libxl_arm.c b/tools/libxl/libxl_arm.c
index d86b135..b9dfdc8 100644
--- a/tools/libxl/libxl_arm.c
+++ b/tools/libxl/libxl_arm.c
@@ -24,6 +24,8 @@
 #define DT_IRQ_TYPE_LEVEL_HIGH     0x00000004
 #define DT_IRQ_TYPE_LEVEL_LOW      0x00000008
 
+#define CONFIG_ARM_NR_BANKS 32
+
 static const char *gicv_to_string(uint8_t gic_version)
 {
     switch (gic_version) {
@@ -388,28 +390,25 @@ static int make_psci_node(libxl__gc *gc, void *fdt)
 static int make_memory_nodes(libxl__gc *gc, void *fdt,
                              const struct xc_dom_image *dom)
 {
-    int res, i;
+    int res;
     const char *name;
-    const uint64_t bankbase[] = GUEST_RAM_BANK_BASES;
+    uint32_t regs[CONFIG_ARM_NR_BANKS * (ROOT_ADDRESS_CELLS + ROOT_SIZE_CELLS)] = { 0 };
 
-    for (i = 0; i < GUEST_RAM_BANKS; i++) {
-        name = GCSPRINTF("memory@%"PRIx64, bankbase[i]);
+    name = GCSPRINTF("memory@%"PRIx64, (uint64_t)0);
 
-        LOG(DEBUG, "Creating placeholder node /%s", name);
+    LOG(DEBUG, "Creating placeholder node /%s", name);
 
-        res = fdt_begin_node(fdt, name);
-        if (res) return res;
+    res = fdt_begin_node(fdt, name);
+    if (res) return res;
 
-        res = fdt_property_string(fdt, "device_type", "memory");
-        if (res) return res;
+    res = fdt_property_string(fdt, "device_type", "memory");
+    if (res) return res;
 
-        res = fdt_property_regs(gc, fdt, ROOT_ADDRESS_CELLS, ROOT_SIZE_CELLS,
-                                1, 0, 0);
-        if (res) return res;
+    res = fdt_property(fdt, "reg", regs, sizeof(regs));
+    if (res) return res;
 
-        res = fdt_end_node(fdt);
-        if (res) return res;
-    }
+    res = fdt_end_node(fdt);
+    if (res) return res;
 
     return 0;
 }
@@ -916,29 +915,43 @@ out:
     return rc;
 }
 
-static void finalise_one_memory_node(libxl__gc *gc, void *fdt,
-                                     uint64_t base, uint64_t size)
+static void finalise_memory_nodes(libxl__gc *gc, void *fdt,
+                                     struct xc_dom_image *dom)
 {
-    int node, res;
-    const char *name = GCSPRINTF("/memory@%"PRIx64, base);
+    uint32_t regs[(ROOT_ADDRESS_CELLS + ROOT_SIZE_CELLS) * CONFIG_ARM_NR_BANKS];
+    be32 *cells = &regs[0];
+    struct xc_dom_membank *bank = dom->memory_banks;
+    int i = 0, node, res;
+    const char *name = GCSPRINTF("/memory@%"PRIx64, (uint64_t)0);
 
     node = fdt_path_offset(fdt, name);
     assert(node > 0);
 
-    if (size == 0) {
-        LOG(DEBUG, "Nopping out placeholder node %s", name);
-        fdt_nop_node(fdt, node);
-    } else {
-        uint32_t regs[ROOT_ADDRESS_CELLS+ROOT_SIZE_CELLS];
-        be32 *cells = &regs[0];
-
-        LOG(DEBUG, "Populating placeholder node %s", name);
-
-        set_range(&cells, ROOT_ADDRESS_CELLS, ROOT_SIZE_CELLS, base, size);
-
-        res = fdt_setprop_inplace(fdt, node, "reg", regs, sizeof(regs));
-        assert(!res);
-    }
+     while( (i < CONFIG_ARM_NR_BANKS) && bank )
+     {
+         if( bank->first >= dom->rambase_pfn )
+         {
+             set_range(&cells, ROOT_ADDRESS_CELLS, ROOT_SIZE_CELLS,
+                   (uint64_t)bank->first << XC_PAGE_SHIFT,
+                   (uint64_t)bank->count << XC_PAGE_SHIFT);
+             i++;
+         }
+         bank = bank->next;
+     }
+
+
+    if( (i == CONFIG_ARM_NR_BANKS) && bank )
+        LOG(WARN, "Domain has more memory banks then %d,"
+                  " all memory banks over %d will be ignored. \n"
+                  "To use all banks, enlarge CONFIG_ARM_NR_BANKS"
+                  " in Xen and DomU kernel.\n",
+		          CONFIG_ARM_NR_BANKS, CONFIG_ARM_NR_BANKS);
+
+    for(; i < CONFIG_ARM_NR_BANKS; i++)
+        set_range(&cells, ROOT_ADDRESS_CELLS, ROOT_SIZE_CELLS, 0, 0);
+
+    res = fdt_setprop_inplace(fdt, node, "reg", regs, sizeof(regs));
+    assert(!res);
 }
 
 int libxl__arch_domain_finalise_hw_description(libxl__gc *gc,
@@ -946,8 +959,6 @@ int libxl__arch_domain_finalise_hw_description(libxl__gc *gc,
                                                struct xc_dom_image *dom)
 {
     void *fdt = dom->devicetree_blob;
-    int i;
-    const uint64_t bankbase[] = GUEST_RAM_BANK_BASES;
 
     const struct xc_dom_seg *ramdisk = dom->ramdisk_blob ?
         &dom->ramdisk_seg : NULL;
@@ -980,11 +991,7 @@ int libxl__arch_domain_finalise_hw_description(libxl__gc *gc,
 
     }
 
-    for (i = 0; i < GUEST_RAM_BANKS; i++) {
-        const uint64_t size = (uint64_t)dom->rambank_size[i] << XC_PAGE_SHIFT;
-
-        finalise_one_memory_node(gc, fdt, bankbase[i], size);
-    }
+    finalise_memory_nodes(gc, fdt, dom);
 
     debug_dump_fdt(gc, fdt);
 
diff --git a/xen/common/memory.c b/xen/common/memory.c
index ccc6436..e572c89 100644
--- a/xen/common/memory.c
+++ b/xen/common/memory.c
@@ -169,6 +169,7 @@ static void populate_physmap(struct memop_args *a)
         }
         else
         {
+#if 0
             if ( is_domain_direct_mapped(d) )
             {
                 mfn = gpfn;
@@ -197,6 +198,7 @@ static void populate_physmap(struct memop_args *a)
                 page = mfn_to_page(mfn);
             }
             else
+#endif
             {
                 page = alloc_domheap_pages(d, a->extent_order, a->memflags);
 
@@ -213,9 +215,18 @@ static void populate_physmap(struct memop_args *a)
                 mfn = page_to_mfn(page);
             }
 
+            if(is_domain_11_notallocated(d))
+            {
+                if(!(( gpfn >= (GUEST_MAGIC_BASE >> PAGE_SHIFT) ) &&
+                    (gpfn < ((GUEST_MAGIC_BASE + 3 * PAGE_SIZE) >> PAGE_SHIFT ))))
+                    gpfn = mfn;
+                if(gpfn == ((GUEST_MAGIC_BASE + 2 * PAGE_SIZE) >> PAGE_SHIFT ))
+                    d->is_11_mem_allocated = true;
+            }
+
             guest_physmap_add_page(d, gpfn, mfn, a->extent_order);
 
-            if ( !paging_mode_translate(d) )
+            if ( !paging_mode_translate(d) || is_domain_11_notallocated(d) )
             {
                 for ( j = 0; j < (1U << a->extent_order); j++ )
                     set_gpfn_from_mfn(mfn + j, gpfn + j);
diff --git a/xen/include/xen/sched.h b/xen/include/xen/sched.h
index da690ca..c89fe04 100644
--- a/xen/include/xen/sched.h
+++ b/xen/include/xen/sched.h
@@ -848,6 +848,7 @@ void watchdog_domain_destroy(struct domain *d);
 
 /* This check is for is allowed 1:1 mapping for domain */
 #define is_domain_allowed_11_map(_d) ((_d)->is_allowed_11_mapping)
+#define is_domain_11_notallocated(_d) (is_domain_allowed_11_map(_d) && !_d->is_11_mem_allocated)
 
 #define VM_ASSIST(d, t) (test_bit(VMASST_TYPE_ ## t, &(d)->vm_assist))
 
-- 
1.9.1

